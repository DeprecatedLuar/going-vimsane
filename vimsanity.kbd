(defcfg
  process-unmapped-keys yes
  log-layer-changes no
  linux-device-detect-mode keyboard-only
)

;; ============ SOURCE ============
(defsrc
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  q    w    e    r    t    y    u    i    o    p    [    ]    \
  caps a    s    d    f    g    h    j    k    l    ;    '    ret
  lsft 102d z    x    c    v    b    n    m    ,    .    /    rsft
  lctl lmet lalt           spc            ralt rmet rctl
)

;; ============ VARIABLES ============
(defvar
  Tt 200 ;; tap time
  Ht 200 ;; hold time
)

;; ============ FAKE KEYS ============
(deffakekeys
  vshift lsft  ;; Virtual key to hold shift
  vimk (layer-switch vim-normal)
  def  (layer-switch default)
  escaps (layer-switch escape)
  metl (multi lmet (layer-while-held meta-layer))
  safety (macro (on-press release-vkey vshift) 10)

)

;; ============ ALIASES ============
(defalias
  ;; International key (102d): tap = one-shot ctrl, hold = ctrl
  intl-double-ctrl (tap-hold $Tt $Ht (one-shot 2000 lctl) lctl)

  vimn (layer-switch vim-normal)
  def (layer-switch default)
  escaps (layer-switch escape)
  meta (multi (on-press tap-vkey safety) (on-release tap-vkey def) lmet (layer-while-held meta-layer))
  vsft (layer-while-held vim-shifted)

  cap (tap-hold-press $Tt $Ht (tap-dance $Ht (@vimn @escaps)) @meta) ;; Caps Lock: single tap for vim-normal, double tap for escape, hold for meta-layer
  pac (tap-hold-press $Tt $Ht (tap-dance $Ht (@def @escaps))  @meta)

  ;; Direct modifiers (no layers)
  a^ (tap-hold 200 250 a tab)
  f^ (tap-hold 200 250 f lctl)
  j^ (tap-hold 200 300 j lctl)
  d^ (tap-hold 200 250 d lsft)
  k^ (tap-hold 200 300 k lsft)
  s^ (tap-hold 200 250 s lalt)
  l^ (tap-hold 200 300 l lalt)

  ;; Meta-layer tap-hold for asdf
  a-meta (tap-hold 110 110 a tab)
  s-meta (tap-hold 110 110 s lalt)
  d-meta (tap-hold 110 110 d lsft)
  f-meta (tap-hold 110 110 f lctl)

  ctrl-exit (multi lctl @def)


  vis (multi (layer-switch visual-mode) (on-press press-vkey vshift))   ;; Visual mode: switch layer + hold shift


  
  vexit (macro (on-press tap-vkey vimk) 10 (on-press release-vkey vshift) 10 left)   ;; Exit visual mode: release shift + switch to vim-normal + press left   

  insert-exit @def
  super-exit (multi lmet @def)

  vcp (macro (on-press release-vkey vshift) 10 C-c 10 (on-press tap-vkey vimk) left)
  vcut (macro (on-press release-vkey vshift) 10 C-x 10 (on-press tap-vkey vimk))
  vdel (macro (on-press release-vkey vshift) 10 del 10 (on-press tap-vkey vimk))

  ;; Visual mode caps lock handling (releases vshift, deselects, then switches layer)
  vdef (macro (on-press release-vkey vshift) 10 left 10 (on-press tap-vkey def))
  vescaps (macro (on-press release-vkey vshift) 10 left 10 (on-press tap-vkey escaps))
  vmeta (multi (on-press release-vkey vshift) @meta)
  vcaps (tap-hold-press $Tt $Ht (tap-dance $Ht (@vdef @vescaps)) @vmeta)

  fnd (macro C-f 10 (on-press tap-vkey def))

  ;; Operators switch to their layer
  d (layer-switch delete-ops)
  y (layer-switch yank-ops)
  g (layer-switch g-ops)

  ;; Delete operations (execute + return to vim-normal)
  dw (macro C-S-right bspc (on-press tap-vkey vimk))
  db (macro C-S-left bspc (on-press tap-vkey vimk))
  dd (macro spc 5  home S-end del 10 bspc 5 home (on-press tap-vkey vimk))
  d$ (macro S-end del (on-press tap-vkey vimk))

  ;; Yank operations (execute + return to vim-normal)
  yw (macro C-S-right C-c left (on-press tap-vkey vimk))
  yb (macro C-S-left C-c right (on-press tap-vkey vimk))
  yy (macro home S-end C-c left (on-press tap-vkey vimk))

  ;; G operations (execute + return to vim-normal)
  gg C-home

  ;; Escape from ops layers
  ops-esc (layer-switch vim-normal)

  D (macro S-end del)


 
)

;; ============ LAYERS ============
(deflayer default
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  q    w    e    r    t    y    u    i    o    p    [    ]    \
  @cap @a^  @s^  @d^  @f^  g    h    @j^  @k^  @l^  ;    '    ret
  lsft @intl-double-ctrl z    x    c    v    b    n    m    ,    .    /    rsft
  lctl @super-exit lalt           spc            ralt @super-exit rctl
)

(deflayer vim-normal
  XX   1    2    3    XX   5    6    7    8    9    0    XX   XX   bspc
  XX   XX   C-right XX   XX   XX   @y  C-z  @insert-exit XX   C-v  [    ]    XX
  @pac XX   XX   @d  XX   @g   left down up right XX   '    ret
  @vsft @intl-double-ctrl XX   del  XX   @vis C-left   C-g  XX   XX   XX   @fnd  @vsft
  @ctrl-exit @super-exit lalt           spc            ralt @super-exit @ctrl-exit
)

(deflayer vim-shifted
  XX   XX   XX   XX   end  XX   XX   XX   XX   XX   XX   XX   XX   XX
  XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX
  XX   XX   XX   @D   XX   C-end   XX   XX   XX   XX   XX   XX   XX
  _    XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   _
  XX   XX   XX              XX              XX   XX   XX
)

(deflayer visual-mode
  XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   @vdel
  XX   XX   XX   XX   XX   XX   @vcp  XX   XX   XX   XX   XX   XX   XX
  @vcaps XX   XX  @vcut XX   XX   S-left S-down S-up S-right XX   XX   ret
  XX   XX   XX   @vdel XX   @vexit XX   XX   XX   XX   XX   XX   XX
  XX   @vcaps XX              XX              XX   @vcaps XX
)

(deflayer escape
  _    _    _    _    _    _    _    _    _    _    _    _    _    _
  _    _    _    _    _    _    _    _    _    _    _    _    _    _
  @def _    _    _    _    _    _    _    _    _    _    _    _
  _    _    _    _    _    _    _    _    _    _    _    _    _
  _    _    _              _              _    _    _
)

(deflayer meta-layer
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  q    w    e    r    t    y    u    i    o    p    [    ]    \
  _    @a-meta @s-meta @d-meta @f-meta g left down up right ; ' ret
  lsft @intl-double-ctrl z    x    c    v    b    n    m    ,    .    /    rsft
  lctl _    lalt           spc            ralt _    rctl
)

(deflayer delete-ops
  XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX
  XX   XX   @dw  XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX
  @ops-esc XX   XX   @dd  XX   XX   XX   XX   XX   XX   @d$  XX   XX
  XX   XX   XX   XX   XX   @db  XX   XX   XX   XX   XX   XX   XX
  XX   XX   XX              XX              XX   XX   XX
)

(deflayer yank-ops
  XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX
  XX   XX   @yw  XX   XX   XX   @yy  XX   XX   XX   XX   XX   XX   XX
  @ops-esc XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX
  XX   XX   XX   XX   XX   @yb  XX   XX   XX   XX   XX   XX   XX
  XX   XX   XX              XX              XX   XX   XX
)

(deflayer g-ops
  XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX
  XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX
  @ops-esc XX   XX   XX   XX   @gg  XX   XX   XX   XX   XX   XX   XX
  XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX
  XX   XX   XX              XX              XX   XX   XX
)
